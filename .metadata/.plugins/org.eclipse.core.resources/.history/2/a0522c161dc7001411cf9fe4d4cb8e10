package queue;
import java.util.*;

public class FifoQueue<E> extends AbstractQueue<E> implements Queue<E> {
	private QueueNode<E> last;
	private int size;
	

	public FifoQueue() {
		last  = null;
		size = 0;

	}

	/**	
	 * Returns an iterator over the elements in this queue
	 * @return an iterator over the elements in this queue
	 */	
	public Iterator<E> iterator() {
		return new QueueIterator();
	}

	/**	
	 * Returns the number of elements in this queue
	 * @return the number of elements in this queue
	 */
	public int size() {		
		return size;
	}

	/**	
	 * Inserts the specified element into this queue, if possible
	 * post:	The specified element is added to the rear of this queue
	 * @param	x the element to insert
	 * @return	true if it was possible to add the element 
	 * 			to this queue, else false
	 */
	public boolean offer(E x) {
		QueueNode<E> temp;
		if(isEmpty()){
			temp  = new QueueNode<E>(x);
			last = temp; 
			last.next = last;
		}else{
			temp = new QueueNode<E>(x);
			temp.next = last.next;
			last.next = temp;
			last = temp;
		}
		size ++;
		return true;
	}

	/**	
	 * Retrieves and removes the head of this queue, 
	 * or null if this queue is empty.
	 * post:	the head of the queue is removed if it was not empty
	 * @return 	the head of this queue, or null if the queue is empty 
	 */
	public E poll() {
		if(isEmpty()){
			return null;
		}
			QueueNode<E> first = last.next;
			last.next = first.next;
			size --;
			return first.element;
		
	}

	/**	
	 * Retrieves, but does not remove, the head of this queue, 
	 * returning null if this queue is empty
	 * @return 	the head element of this queue, or null 
	 * 			if this queue is empty
	 */
	public E peek() {
		if(isEmpty()){
			
			return null;
		}else{
			QueueNode<E> first = last.next;
			return first.element;
		}
	}
	/**
	 * Appends the specified queue to this queue
	 * post: all elements from the specified queue are appended
	 * 		to this queue. The specified queue (q) is empty
	 * @param q the queue to append
	 */
	public void append(FifoQueue<E> q){
		if(isEmpty()){
			last = q.last;
			size +=q.size;
		}else if(!q.isEmpty()){
			QueueNode<E> temp = q.last.next;
			last.next = q.last.next;
			q.last.next = temp;
			last = q.last;
			size +=q.size;
		}
		q.last = null;
		q.size=0;
		
	}


	private static class QueueNode<E> {
		E element;
		QueueNode<E> next;

		private QueueNode(E x) {
			element = x;
			next = null;
		}

	}
	
	
	private class QueueIterator implements Iterator<E>{
		private QueueNode<E> pos;
		private int count;
		
		private QueueIterator(){
			pos = last;
			count = 0;
		}
		
		public boolean hasNext(){
			if (pos == null){
				return false;
			}else if(count >= size){
				return false;
			}else{
				return true;
			}
		
		}

		@Override
		public E next() {
			if (!hasNext()){
				throw new NoSuchElementException();
			}else{
				QueueNode<E> temp = pos;
				pos = temp.next;
				count++ ;
				return temp.element;
			}
		}
		
		public void remove(){
			throw new UnsupportedOperationException();
		}
		
		
		
	}

}

