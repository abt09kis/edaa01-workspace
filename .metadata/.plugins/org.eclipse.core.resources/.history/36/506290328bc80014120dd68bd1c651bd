package map;

public class SimpleHashMap<K, V> implements Map<K, V> {
	private Entry<K,V>[] table;
	private double loadFactor = 0.75;
	private int capacity;
	private int size;
	private boolean rehashing;
	
	public SimpleHashMap(){
		table = (Entry<K, V>[]) new Entry[capacity];
		size = 0;
	}
	
	public SimpleHashMap(int capacity){
		this.capacity = capacity;
		size = 0;
		table  = (Entry<K,V>[]) new Entry[capacity];
	}
	
	public String show(){
		StringBuilder sb = new StringBuilder();
		for(int i = 0; i < table.length; i++){
			sb.append(i + "\t");
			if(table[i] !=null){
				Entry<K,V> e = table[i];
				while(e !=null){
					sb.append(e.toString() + " ");
					e = e.next;
				}
			}else{
				sb.append("empty");
			}sb.append("\n");
			
		}
		return sb.toString();
		
	}
	

	public static class Entry<K, V> implements Map.Entry<K,V> {
		private K key;
		private V value;
		private Entry<K,V> next;
		
		public Entry(K key, V value){
			this.key = key;
			this.value = value;
			
		}
		

		@Override
		public K getKey() {
			return key;
		}

		@Override
		public V getValue() {
			return value;
		}

		@Override
		public V setValue(V value) {
			V temp =  this.value;
			this.value = value;
			return temp;
			
		}
		public String toString(){
			return key + "=" + value;
		}

	}

	@Override
	public V get(Object arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isEmpty() {
		if(size == 0){
			return true;
		}
		return false;
	}
	
	private int index(K key){
		int index = key.hashCode() % capacity;
		index = Math.abs(index);
		return index;
	}
	
	private Entry<K,V> find(int index, K key){
		Entry<K,V> e = table[index];
		while(e != null){
			if(e.getKey().equals(key)){
				return e;
			}else{
				e = e.next;
			}
		}
		return null;
	}

	@Override
	public V put(K key, V value) {
		int index = index(key);
		Entry<K,V> e = find(index, key);
		if(e != null){
			
		}
		
		return null;
	}

	@Override
	public V remove(Object arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		return size;
	}
	
	public boolean reshash(){
		rehashing = true;
		capacity *=2;
		Entry<K,V> oldTable[]  = table;
		table = (Entry<K,V>[] ) new Entry[capacity];
		for(int i = 0; i < oldTable.length; i++){
			Entry<K,V> head = oldTable[i];
			while( head != null){
				put(head.key, head.value);
				head = head.next;
			}
		}
		rehashing = false;
	}
	
	public boolean isTooBig(){
		return ((double) size / capacity) > loadFactor;
	}

}
